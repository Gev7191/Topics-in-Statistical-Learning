library(shiny)
pal <- colorNumeric(palette = "RdBu", NULL)
age_ratio_dist <- leaflet(geo_pop_by_department$department) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(geo_pop_by_department$age_dependency_ratio), weight = 2, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7) %>%
addLegend(pal = pal, values = ~geo_pop_by_department$age_dependency_ratio, opacity = 1.0, title = "Age Dependency Ratio")
pal <- colorNumeric(palette = "RdBu", NULL,domain = states$density)
pal <- colorNumeric(palette = "RdBu", NULL,domain = geo_pop_by_department$aged_dependency_ratio)
age_ratio_dist <- leaflet(geo_pop_by_department$department) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(geo_pop_by_department$age_dependency_ratio)) %>%
addLegend(pal = pal, values = ~geo_pop_by_department$age_dependency_ratio, opacity = 1.0, title = "Age Dependency Ratio")
# Plot dependency ratio distribution for each department
#install package leaflet
library(leaflet)
library(shiny)
pal <- colorNumeric(palette = "RdBu", NULL,domain = geo_pop_by_department$aged_dependency_ratio)
age_ratio_dist <- leaflet(FraMap) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(geo_pop_by_department$age_dependency_ratio)) %>%
addLegend(pal = pal, values = ~geo_pop_by_department$age_dependency_ratio, opacity = 1.0, title = "Age Dependency Ratio")
# Plot dependency ratio distribution for each department
#install package leaflet
library(leaflet)
library(shiny)
pal <- colorNumeric(palette = "RdBu", NULL,domain = geo_pop_by_department$aged_dependency_ratio)
age_ratio_dist <- leaflet(geo_pop_by_department$department) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(geo_pop_by_department$age_dependency_ratio)) %>%
addLegend(pal = pal, values = ~geo_pop_by_department$age_dependency_ratio, opacity = 1.0, title = "Age Dependency Ratio")
# Plot dependency ratio distribution for each department
#install package leaflet
library(leaflet)
library(shiny)
pal <- colorNumeric(palette = "RdBu", NULL,domain = geo_pop_by_department$aged_dependency_ratio)
age_ratio_dist <- leaflet(FraMap) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(geo_pop_by_department$age_dependency_ratio)) %>%
addLegend(pal = pal, values = ~geo_pop_by_department$age_dependency_ratio, opacity = 1.0, title = "Age Dependency Ratio")
# Plot dependency ratio distribution for each department
#install package leaflet
library(leaflet)
library(shiny)
pal <- colorNumeric(palette = "RdBu", NULL,domain = FraMap)
# Plot dependency ratio distribution for each department
#install package leaflet
library(leaflet)
library(shiny)
pal <- colorNumeric(palette = "RdBu", NULL)
age_ratio_dist <- leaflet(FraMap) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(geo_pop_by_department$age_dependency_ratio)) %>%
addLegend(pal = pal, values = ~geo_pop_by_department$age_dependency_ratio, opacity = 1.0, title = "Age Dependency Ratio")
# Plot dependency ratio distribution for each department
#install package leaflet
library(leaflet)
library(shiny)
pal <- colorNumeric(palette = "RdBu", NULL)
age_ratio_dist <- leaflet(FraMap) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(FraMap)) %>%
addLegend(pal = pal, values = ~FraMap, opacity = 1.0, title = "Age Dependency Ratio")
# Plot dependency ratio distribution for each department
#install package leaflet
library(leaflet)
library(shiny)
pal <- colorNumeric(palette = "RdBu", NULL,domain = geo_pop_by_department$aged_dependency_ratio)
age_ratio_dist <- leaflet(geo_pop_by_department$department) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7")
print(age_dependency_ratio_distribution)
# Plot dependency ratio distribution for each department
#install package leaflet
library(leaflet)
library(shiny)
pal <- colorNumeric(palette = "RdBu", NULL,domain = geo_pop_by_department$aged_dependency_ratio)
age_ratio_dist <- leaflet(geo_pop_by_department$department) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(density), weight = 2, opacity = 1,color = "white",dashArray = "3",fillOpacity = 0.7")
print(age_dependency_ratio_distribution)
View(population)
population_data2 <- ddply(population, .(sex, ageCateg5), function(population) {
data.frame(total_population = sum(population$peopleCategNum))
})
pop_pyramid <- ggplot(data = population_data2,
mapping = aes(x = ageCateg5, fill = SEX,
y = ifelse(test = SEX == "Male",
yes = -total_population, no = total_population))) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = abs, limits = max(population_data2$total_population) * c(-1,1)) +
labs(y = "Population") +
coord_flip()
print(pop_pyramid)
population_data2 <- ddply(population, .(sex, ageCateg5), function(population) {
data.frame(total_population = sum(population$peopleCategNum))
})
pop_pyramid <- ggplot(data = population_data2,
mapping = aes(x = ageCateg5, fill = SEX,
y = ifelse(test = sex == "Male",
yes = -total_population, no = total_population))) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = abs, limits = max(population_data2$total_population) * c(-1,1)) +
labs(y = "Population") +
coord_flip()
print(pop_pyramid)
population_data2 <- ddply(population, .(sex, ageCateg5), function(population) {
data.frame(total_population = sum(population$peopleCategNum))
})
pop_pyramid <- ggplot(data = population_data2,
mapping = aes(x = ageCateg5, fill = sex,
y = ifelse(test = sex == "Male",
yes = -total_population, no = total_population))) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = abs, limits = max(population_data2$total_population) * c(-1,1)) +
labs(y = "Population") +
coord_flip()
print(pop_pyramid)
setwd("~/TSL")
setwd("~/TSL")
# options(encoding = "UTF-8")  # for Mac [PROBABLY, to check]
# options(encoding = "ISO-8859-1")  # for Windows [PROBABLY NOT WORKING]
setwd("./data")
firms       <- read.csv("base_etablissement_par_tranche_effectif.csv", encoding = "UTF-8")
geo         <- read.csv("name_geographic_information.csv", encoding = "UTF-8")
salary      <- read.csv("net_salary_per_town_categories.csv", encoding = "UTF-8")
population  <- read.csv("population.csv", encoding = "UTF-8")
# options(encoding = "UTF-8")  # for Mac [PROBABLY, to check]
# options(encoding = "ISO-8859-1")  # for Windows [PROBABLY NOT WORKING]
setwd("./data")
firms       <- read.csv("base_etablissement_par_tranche_effectif.csv", encoding = "UTF-8")
geo         <- read.csv("name_geographic_information.csv", encoding = "UTF-8")
salary      <- read.csv("net_salary_per_town_categories.csv", encoding = "UTF-8")
population  <- read.csv("population.csv", encoding = "UTF-8")
names(firms)
names(population)
names(salary)
names(geo)
# options(encoding = "UTF-8")  # for Mac [PROBABLY, to check]
# options(encoding = "ISO-8859-1")  # for Windows [PROBABLY NOT WORKING]
setwd("./data")
firms       <- read.csv("base_etablissement_par_tranche_effectif.csv", encoding = "UTF-8")
geo         <- read.csv("name_geographic_information.csv", encoding = "UTF-8")
salary      <- read.csv("net_salary_per_town_categories.csv", encoding = "UTF-8")
population  <- read.csv("population.csv", encoding = "UTF-8")
names(firms)
names(population)
names(salary)
names(geo)
names(firms)[2:ncol(firms)] <-
c("town",
"regNum",
"deptNum",
"total",
"null",
"firmsEmpl_1_5",
"firmsEmpl_6_9",
"firmsEmpl_10_19",
"firmsEmpl_20_49",
"firmsEmpl_50_99",
"firmsEmpl_100_199",
"firmsEmpl_200_499",
"firmsEmpl_500plus")
names(salary)[2:ncol(salary)] <-
c("town",
"sal_general",
"sal_executive",
"sal_midManager",
"sal_employee",
"sal_worker",
"sal_Females",
"sal_F_executive",
"sal_F_midManager",
"sal_F_employee",
"sal_F_worker",
"sal_Males",
"sal_M_executive",
"sal_M_midManager",
"sal_M_employee",
"sal_M_worker",
"sal_18_25",
"sal_26_50",
"sal_51plus",
"sal_F_18_25",
"sal_F_26_50",
"sal_F_51plus",
"sal_M_18_25",
"sal_M_26_50",
"sal_M_51plus")
names(population)[5:7] <-
c("ageCateg5",
"sex",
"peopleCategNum")
# Drop unnecessary columns (code/num and name represents same thing)
geo <- subset(geo, select = -c(EU_circo, code_r?gion, num?ro_d?partement, pr?fecture, num?ro_circonscription, ?loignement))# change names
names(firms)[2:ncol(firms)] <-
c("town",
"regNum",
"deptNum",
"total",
"null",
"firmsEmpl_1_5",
"firmsEmpl_6_9",
"firmsEmpl_10_19",
"firmsEmpl_20_49",
"firmsEmpl_50_99",
"firmsEmpl_100_199",
"firmsEmpl_200_499",
"firmsEmpl_500plus")
names(salary)[2:ncol(salary)] <-
c("town",
"sal_general",
"sal_executive",
"sal_midManager",
"sal_employee",
"sal_worker",
"sal_Females",
"sal_F_executive",
"sal_F_midManager",
"sal_F_employee",
"sal_F_worker",
"sal_Males",
"sal_M_executive",
"sal_M_midManager",
"sal_M_employee",
"sal_M_worker",
"sal_18_25",
"sal_26_50",
"sal_51plus",
"sal_F_18_25",
"sal_F_26_50",
"sal_F_51plus",
"sal_M_18_25",
"sal_M_26_50",
"sal_M_51plus")
names(population)[5:7] <-
c("ageCateg5",
"sex",
"peopleCategNum")
# Drop unnecessary columns (code/num and name represents same thing)
geo <- subset(geo, select = -c(EU_circo, code_r?gion, num?ro_d?partement, pr?fecture, num?ro_circonscription, ?loignement))# change names
names(firms)[2:ncol(firms)] <-
c("town",
"regNum",
"deptNum",
"total",
"null",
"firmsEmpl_1_5",
"firmsEmpl_6_9",
"firmsEmpl_10_19",
"firmsEmpl_20_49",
"firmsEmpl_50_99",
"firmsEmpl_100_199",
"firmsEmpl_200_499",
"firmsEmpl_500plus")
names(salary)[2:ncol(salary)] <-
c("town",
"sal_general",
"sal_executive",
"sal_midManager",
"sal_employee",
"sal_worker",
"sal_Females",
"sal_F_executive",
"sal_F_midManager",
"sal_F_employee",
"sal_F_worker",
"sal_Males",
"sal_M_executive",
"sal_M_midManager",
"sal_M_employee",
"sal_M_worker",
"sal_18_25",
"sal_26_50",
"sal_51plus",
"sal_F_18_25",
"sal_F_26_50",
"sal_F_51plus",
"sal_M_18_25",
"sal_M_26_50",
"sal_M_51plus")
names(population)[5:7] <-
c("ageCateg5",
"sex",
"peopleCategNum")
# Drop unnecessary columns (code/num and name represents same thing)
geo <- subset(geo, select = -c(EU_circo, code_r?gion, num?ro_d?partement, pr?fecture, num?ro_circonscription, ?loignement))# change names
names(firms)[2:ncol(firms)] <-
c("town",
"regNum",
"deptNum",
"total",
"null",
"firmsEmpl_1_5",
"firmsEmpl_6_9",
"firmsEmpl_10_19",
"firmsEmpl_20_49",
"firmsEmpl_50_99",
"firmsEmpl_100_199",
"firmsEmpl_200_499",
"firmsEmpl_500plus")
names(salary)[2:ncol(salary)] <-
c("town",
"sal_general",
"sal_executive",
"sal_midManager",
"sal_employee",
"sal_worker",
"sal_Females",
"sal_F_executive",
"sal_F_midManager",
"sal_F_employee",
"sal_F_worker",
"sal_Males",
"sal_M_executive",
"sal_M_midManager",
"sal_M_employee",
"sal_M_worker",
"sal_18_25",
"sal_26_50",
"sal_51plus",
"sal_F_18_25",
"sal_F_26_50",
"sal_F_51plus",
"sal_M_18_25",
"sal_M_26_50",
"sal_M_51plus")
names(population)[5:7] <-
c("ageCateg5",
"sex",
"peopleCategNum")
# Drop unnecessary columns (code/num and name represents same thing)
geo <- subset(geo, select = -c(EU_circo, code_r?gion, num?ro_d?partement, pr?fecture, num?ro_circonscription, ?loignement))# change names
# options(encoding = "UTF-8")  # for Mac [PROBABLY, to check]
# options(encoding = "ISO-8859-1")  # for Windows [PROBABLY NOT WORKING]
setwd("./data")
firms       <- read.csv("base_etablissement_par_tranche_effectif.csv", encoding = "UTF-8")
geo         <- read.csv("name_geographic_information.csv", encoding = "UTF-8")
salary      <- read.csv("net_salary_per_town_categories.csv", encoding = "UTF-8")
population  <- read.csv("population.csv", encoding = "UTF-8")
names(firms)[2:ncol(firms)] <-
c("town",
"regNum",
"deptNum",
"total",
"null",
"firmsEmpl_1_5",
"firmsEmpl_6_9",
"firmsEmpl_10_19",
"firmsEmpl_20_49",
"firmsEmpl_50_99",
"firmsEmpl_100_199",
"firmsEmpl_200_499",
"firmsEmpl_500plus")
names(salary)[2:ncol(salary)] <-
c("town",
"sal_general",
"sal_executive",
"sal_midManager",
"sal_employee",
"sal_worker",
"sal_Females",
"sal_F_executive",
"sal_F_midManager",
"sal_F_employee",
"sal_F_worker",
"sal_Males",
"sal_M_executive",
"sal_M_midManager",
"sal_M_employee",
"sal_M_worker",
"sal_18_25",
"sal_26_50",
"sal_51plus",
"sal_F_18_25",
"sal_F_26_50",
"sal_F_51plus",
"sal_M_18_25",
"sal_M_26_50",
"sal_M_51plus")
names(population)[5:7] <-
c("ageCateg5",
"sex",
"peopleCategNum")
# Drop unnecessary columns (code/num and name represents same thing)
geo <- subset(geo, select = -c(EU_circo, code_r?gion, num?ro_d?partement, pr?fecture, num?ro_circonscription, ?loignement))# change names
# options(encoding = "UTF-8")  # for Mac [PROBABLY, to check]
# options(encoding = "ISO-8859-1")  # for Windows [PROBABLY NOT WORKING]
setwd("./data")
firms       <- read.csv("base_etablissement_par_tranche_effectif.csv", encoding = "UTF-8")
geo         <- read.csv("name_geographic_information.csv", encoding = "UTF-8")
salary      <- read.csv("net_salary_per_town_categories.csv", encoding = "UTF-8")
population  <- read.csv("population.csv", encoding = "UTF-8")
names(firms)
names(population)
names(salary)
names(geo)
names(firms)[2:ncol(firms)] <-
c("town",
"regNum",
"deptNum",
"total",
"null",
"firmsEmpl_1_5",
"firmsEmpl_6_9",
"firmsEmpl_10_19",
"firmsEmpl_20_49",
"firmsEmpl_50_99",
"firmsEmpl_100_199",
"firmsEmpl_200_499",
"firmsEmpl_500plus")
names(salary)[2:ncol(salary)] <-
c("town",
"sal_general",
"sal_executive",
"sal_midManager",
"sal_employee",
"sal_worker",
"sal_Females",
"sal_F_executive",
"sal_F_midManager",
"sal_F_employee",
"sal_F_worker",
"sal_Males",
"sal_M_executive",
"sal_M_midManager",
"sal_M_employee",
"sal_M_worker",
"sal_18_25",
"sal_26_50",
"sal_51plus",
"sal_F_18_25",
"sal_F_26_50",
"sal_F_51plus",
"sal_M_18_25",
"sal_M_26_50",
"sal_M_51plus")
names(population)[5:7] <-
c("ageCateg5",
"sex",
"peopleCategNum")
# Drop unnecessary columns (code/num and name represents same thing)
geo <- subset(geo, select = -c(EU_circo, code_r?gion, num?ro_d?partement, pr?fecture, num?ro_circonscription, ?loignement))# change names
options(encoding="uft-8")
# options(encoding = "UTF-8")  # for Mac [PROBABLY, to check]
# options(encoding = "ISO-8859-1")  # for Windows [PROBABLY NOT WORKING]
setwd("./data")
firms       <- read.csv("base_etablissement_par_tranche_effectif.csv", encoding = "UTF-8")
options(encoding = "ISO-8859-1")
# options(encoding = "UTF-8")  # for Mac [PROBABLY, to check]
# options(encoding = "ISO-8859-1")  # for Windows [PROBABLY NOT WORKING]
setwd("./data")
firms       <- read.csv("base_etablissement_par_tranche_effectif.csv", encoding = "UTF-8")
geo         <- read.csv("name_geographic_information.csv", encoding = "UTF-8")
salary      <- read.csv("net_salary_per_town_categories.csv", encoding = "UTF-8")
population  <- read.csv("population.csv", encoding = "UTF-8")
names(firms)[2:ncol(firms)] <-
c("town",
"regNum",
"deptNum",
"total",
"null",
"firmsEmpl_1_5",
"firmsEmpl_6_9",
"firmsEmpl_10_19",
"firmsEmpl_20_49",
"firmsEmpl_50_99",
"firmsEmpl_100_199",
"firmsEmpl_200_499",
"firmsEmpl_500plus")
names(salary)[2:ncol(salary)] <-
c("town",
"sal_general",
"sal_executive",
"sal_midManager",
"sal_employee",
"sal_worker",
"sal_Females",
"sal_F_executive",
"sal_F_midManager",
"sal_F_employee",
"sal_F_worker",
"sal_Males",
"sal_M_executive",
"sal_M_midManager",
"sal_M_employee",
"sal_M_worker",
"sal_18_25",
"sal_26_50",
"sal_51plus",
"sal_F_18_25",
"sal_F_26_50",
"sal_F_51plus",
"sal_M_18_25",
"sal_M_26_50",
"sal_M_51plus")
names(population)[5:7] <-
c("ageCateg5",
"sex",
"peopleCategNum")
# Drop unnecessary columns (code/num and name represents same thing)
geo <- subset(geo, select = -c(EU_circo, code_r?gion, num?ro_d?partement, pr?fecture, num?ro_circonscription, ?loignement))# change names
